package SpringClasses.JavaConfig.Secirity;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.annotation.web.servlet.configuration.EnableWebMvcSecurity;

import javax.sql.DataSource;

@Configuration
@EnableWebMvcSecurity
@EnableGlobalMethodSecurity
public class AppSecurityConfig extends WebSecurityConfigurerAdapter {

    @Bean(name = "dataSource2")
    public DataSource dataSource() {
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setDriverClassName("com.mysql.jdbc.Driver");
        dataSource.setUrl("jdbc:mysql://localhost:3306/lynx");
        dataSource.setUsername("root");
        dataSource.setPassword("hippi26");
        return dataSource;
    }


    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) {

        try {
            auth.inMemoryAuthentication().withUser("user").password("user").roles("USER");

            auth.inMemoryAuthentication().withUser("admin").password("admin").roles("ADMIN");
            System.out.println("=======================================================");
            auth.jdbcAuthentication().dataSource(dataSource())
                    .usersByUsernameQuery(
                            "select email ,password ,enabled,email from user where email=?")
                    .authoritiesByUsernameQuery(
                            "select email, name ,  role  from user where email=?");
//            auth.userDetailsService(userDetailsService);
        } catch (Exception e) {

        }
    }
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.csrf().disable();
//                http.authorizeRequests()
//                .antMatchers("/login").access("hasRole('USER')")
//                .and().formLogin().defaultSuccessUrl("/", false);
        http.formLogin()
                .loginPage("/")
                .loginProcessingUrl("/loginprocessing")
                .usernameParameter("username")
                .passwordParameter("password");

        http.logout()
                // разрешаем делать логаут всем
//                .permitAll()
                // указываем URL логаута
                .logoutUrl("/logout")
                // указываем URL при удачном логауте
                .logoutSuccessUrl("/")
                // делаем не валидной текущую сессию
                .invalidateHttpSession(true);
        http.exceptionHandling()
                .accessDeniedPage("/Main");
//           http.exceptionHandling().accessDeniedHandler(globalExceptionHandler);


    }
//    @Override
//    protected void configure(HttpSecurity http) throws Exception {
//
//        http.authorizeRequests()
//                .antMatchers("/").access("hasRole('USER') or hasRole('ADMIN')")
//                .and().formLogin().loginProcessingUrl("/loginprocessing")
//                .usernameParameter("ssoId").passwordParameter("password")
//                .and().exceptionHandling().accessDeniedPage("/Main");
//        http.logout()
//                // разрешаем делать логаут всем
////                .permitAll()
//                // указываем URL логаута
//                .logoutUrl("/logout")
//                // указываем URL при удачном логауте
//                .logoutSuccessUrl("/Main")
//                // делаем не валидной текущую сессию
//                .invalidateHttpSession(true);
//
//    }
}
















//    @Override
//    protected void configure(HttpSecurity http) throws Exception {
//        http.csrf().disable();
//                http.authorizeRequests()
//                .antMatchers("/login").access("hasRole('ADMIN')")
//                .and().formLogin().defaultSuccessUrl("/", false);
//        http.formLogin()
//                .loginProcessingUrl("/loginprocessing")
//                .usernameParameter("username")
//                .passwordParameter("password");
//
//        http.logout()
//                // разрешаем делать логаут всем
////                .permitAll()
//                // указываем URL логаута
//                .logoutUrl("/logout")
//                // указываем URL при удачном логауте
//                .logoutSuccessUrl("/Main")
//                // делаем не валидной текущую сессию
//                .invalidateHttpSession(true);
//        http.exceptionHandling()
//                .accessDeniedPage("/Main");
////           http.exceptionHandling().accessDeniedHandler(globalExceptionHandler);
//
//
//    }


//    @Autowired
//    @Qualifier("customUserDetailsService")
//    UserDetailsService userDetailsService;
//
//    @Autowired
//    public void configureGlobalSecurity(AuthenticationManagerBuilder auth) throws Exception {
//        auth.userDetailsService(userDetailsService);}


//@Autowired
//    private UserDetailsService userDetailsService;

//@Autowired
//    public void registerGlobalAuthentication(AuthenticationManagerBuilder auth) throws Exception {
//        auth.userDetailsService(userDetailsService);
//                .passwordEncoder(getShaPasswordEncoder()
//                );

//    }
//    @Override
//    protected void configure(HttpSecurity http) throws Exception {
//        // включаем защиту от CSRF атак
//        http.csrf()
//                .disable()
//                // указываем правила запросов
//                // по которым будет определятся доступ к ресурсам и остальным данным
//                .authorizeRequests()
//                .antMatchers("/resources/**", "/**").permitAll()
//                .anyRequest().permitAll()
//                .and();
//
//        http.formLogin()
//                // указываем страницу с формой логина
////                .loginPage("/login")
//                // указываем action с формы логина
//                .loginProcessingUrl("/loginprocessing")
//                // указываем URL при неудачном логине
//                .failureUrl("/Main")
//                // Указываем параметры логина и пароля с формы логина
//                .usernameParameter("username")
//                .passwordParameter("password")
//                // даем доступ к форме логина всем
//                .permitAll();
//
//        http.logout()
//                // разрешаем делать логаут всем
//                .permitAll()
//                // указываем URL логаута
//                .logoutUrl("/logout")
//                // указываем URL при удачном логауте
//                .logoutSuccessUrl("/login?logout")
//                // делаем не валидной текущую сессию
//                .invalidateHttpSession(true);
//    }
//
//    }
//    @Bean
//    public ShaPasswordEncoder getShaPasswordEncoder(){
//        return new ShaPasswordEncoder();
//    }


